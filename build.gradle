buildscript {
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'scala'
    id 'java-library'
    id 'jacoco'
    id "org.springframework.boot" version "2.4.0"
    id "org.jetbrains.kotlin.jvm" version "1.4.20"
    id "org.flywaydb.flyway" version "7.3.0"
    id "com.github.ben-manes.versions" version "0.36.0"
}

ext['groovy.version'] = '${gradleVersion}'

apply from: "test.gradle"

repositories {
    mavenCentral()
    jcenter()
    google()
    flatDir {
        dirs "libs"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//tasks.withType(KotlinCompile).all {
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
//    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main.scala.srcDirs += "src/main/scala"
    main.kotlin.srcDirs += "src/main/kotlin"
    main.java.srcDirs += "src/main/java"
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

wrapper {
    gradleVersion="${gradleVersion}"
}

dependencies {
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    //Groovy
    implementation("org.codehaus.groovy:groovy-all:${groovyVersion}")

    //Scala
    implementation("org.scala-lang:scala-library:${scalaVersion}")

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    // implementation("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    //Added on 2020-12-01
    implementation("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

    //Tomcat
    implementation("org.apache.tomcat.embed:tomcat-embed-core:9.0.40")

    //Jackson
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")

    //Camel
    implementation("org.apache.camel.springboot:camel-spring-boot-starter:${apacheCamelVersion}")
    implementation("org.apache.camel:camel-core:${apacheCamelVersion}")

    //postgres
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")

    //h2 database
    runtimeOnly("com.h2database:h2:${h2Version}")

    //Flyway
    implementation("org.flywaydb:flyway-core:${flywayVersion}")

    //excel
    implementation("org.apache.poi:poi:${poiVersion}")
    implementation("org.apache.poi:poi-ooxml:${poiVersion}")

    //influx
    implementation("io.micrometer:micrometer-registry-influx:${micrometerInfluxVersion}")

    //Validation
    implementation("javax.validation:validation-api:${validationVersion}")
    //implementation "org.hibernate:hibernate-validator-annotation-processor:${hibernateVersion}"

    //rest client
    implementation("com.squareup.retrofit2:retrofit:${retrofitVersion}")

    //log
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")

    //hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
}

//tasks.withType(bootRun) {
//    options.encoding = 'UTF-8'
//}
