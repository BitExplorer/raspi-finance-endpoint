buildscript {
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
    id 'scala'
    id 'java-library'
    id 'jacoco'
    //id "gradle-clojure.clojure" version '0.5.0-alpha.1'
    //id "io.spring.dependency-management" version '1.0.9.RELEASE'
    id "org.springframework.boot" version "2.3.3.RELEASE"
    id "org.jetbrains.kotlin.jvm" version "1.4.0"
    id "org.flywaydb.flyway" version "6.5.3"
}

//flyway {
//    url = 'jdbc:postgresql://localhost:5432/finance_db'
//    user = 'henninb'
//    password = 'password'
//    baselineOnMigrate = true
//    sqlMigrationPrefix = ".sql"
//    locations = [
//            'classpath:db/migration/'
//    ]
//}

ext['springBootVersion'] = '2.3.3.RELEASE'
ext['apacheCamelVersion'] = '3.1.0'
ext['kotlinVersion'] = '1.4.0'
ext['groovyVersion'] = '3.0.4'
ext['qualityPluginVersion'] = '3.0.0'
ext['codenarcPluginVersion'] = '0.20.0'
ext['activemqVersion'] = '5.16.0'
ext['jolokiaVersion'] = '1.6.2'
ext['postgresqlVersion'] = '42.2.16'
ext['kafkaVersion'] = '2.5.0'
ext['hibernateVersion'] = '5.4.20.Final'
ext['h2Version'] = '1.4.200'
ext['clojureVersion'] = '1.10.1'
ext['scalaVersion'] = '2.13.3'
ext['gradleVersion'] = '6.6.1'
ext['mongoVersion'] = '3.12.2'
ext['wmqVersion'] = '7.0.1.9'
ext['swaggerVersion'] = '2.9.2'
//def swaggerVersion='2.0.10'
ext['cucumberVersion'] = '4.8.0'
ext['springJmsVersion'] = '5.2.7.RELEASE'
ext['lombokVersion'] = '1.18.12'
ext['bootstrapVersion'] = '4.3.1'
ext['jqueryVersion'] = '3.4.1'
ext['spockVersion'] = '2.0-M3-groovy-3.0'
ext['poiVersion'] = '4.1.2'
ext['logbackVersion'] = '1.2.3'
ext['powerMockVersion'] = '2.0.4'
ext['javaFakerVersion'] = '1.0.1'
ext['junitVersion='] = '5.3.1'
ext['mockitoVersion'] = '2.23.0'
ext['oracleVersion='] = '12.1.0.2'
ext['thymeleafVersion'] = '3.0.10.RELEASE'
ext['jdbcTemplateVersion'] = '5.2.2.RELEASE'
ext['testContainersVersion'] = '1.12.3'
ext['httpBuilderVersion'] = '1.0.4'
ext['randomBeanVersion'] = '3.7.0'
ext['hibernateJpaVersion'] = '1.0.0.Final'
ext['jacksonVersion'] = '2.11.2'
ext['micrometerInfluxVersion'] = '1.4.1'
ext['validationVersion'] = '2.0.1.Final'
ext['flywayVersion'] = '6.5.3'

ext['groovy.version'] = '${gradleVersion}'

apply from: "test.gradle"

repositories {
    mavenCentral()
    jcenter()
    google()
    flatDir {
        dirs "libs"
    }
}

compileKotlin {
//    kotlinOptions.jvmTarget = "11"
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main.scala.srcDirs += "src/main/scala"
    main.kotlin.srcDirs += "src/main/kotlin"
    main.java.srcDirs += "src/main/java"
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

wrapper {
    gradleVersion="${gradleVersion}"
}

dependencies {
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    //Groovy
    implementation("org.codehaus.groovy:groovy-all:${groovyVersion}")

    //Scala
    implementation("org.scala-lang:scala-library:${scalaVersion}")

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    // implementation("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

    //Jackson
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")

    //Camel
    // implementation("org.apache.camel:camel-spring-boot-starter:${apacheCamelVersion}")
    // implementation("org.apache.camel:camel-core:${apacheCamelVersion}")

    //postgres
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")

    //h2 database
    runtimeOnly("com.h2database:h2:${h2Version}")

    //Flyway
    implementation("org.flywaydb:flyway-core:${flywayVersion}")

    //excel
    implementation("org.apache.poi:poi:${poiVersion}")
    implementation("org.apache.poi:poi-ooxml:${poiVersion}")

    //influx
    implementation("io.micrometer:micrometer-registry-influx:${micrometerInfluxVersion}")

    //Validation
    implementation("javax.validation:validation-api:${validationVersion}")
    //implementation "org.hibernate:hibernate-validator-annotation-processor:${hibernateVersion}"

    //log
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:5.2")

    //hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")

    //implementation 'org.inferred:freebuilder:2.4.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
