server:
  port: ${SERVER_PORT}

#spring.datasource.data=classpath:accounts.sql

spring:
  profiles:
    active: stage

  # ===============================
  # = DATA SOURCE
  # ===============================
  datasource:
    url: jdbc:h2:mem:finance_db;DB_CLOSE_DELAY=-1
    username: sa
    password:
    driver-class-name: org.h2.Driver
    # testWhileIdle to persist the connection when idle for a long period of time
    tomcat:
      validation-query: SELECT 1
      test-while-idle: true
    platform: h2
    continue-on-error: false
    schema: classpath:schema-stage-h2.sql
    data: classpath:data-stage-h2.sql
    # enable flag to always if you want to utilize data.sql and schema.sql
    initialization-mode: always
  thymeleaf:
    cache: false
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
  jpa:
    show-sql: true
    open-in-view: false
    generate-ddl: true
    hibernate:
      ddl-auto: ${HIBERNATE_DDL}
    properties:
      hibernate:
        jdbc:
          time_zone: UTC

logging:
  level.org.hibernate.SQL: WARN

#spring.jpa.hibernate.ddl-auto: none
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#none is build from schema.sql (no Java classes)
#update only add new tables in the schema.sql (starting from Java classes)

# route:
#   auto-Start-Route: ${CAMEL_ROUTE_ENABLED}
#   json-Files-Input-Path: ${JSON_FILES_INPUT_PATH}
#   json-File-Reader-Route-Id: jsonFileReaderRoute
#   transaction-To-Database-Route-Id: transactionToDatabaseRoute
#   json-File-Writer-Route-Id: jsonFileWriterRoute
#   process-each-transaction: direct:processEachTransaction
#   json-file-writer-route: direct:jsonFileWriterRoute

# ===============================
# = Camel
# ===============================
# camel:
#   springboot:
#     name: RaspiFinance
#   health.check.routes.enabled: false

# ===============================
# = Thymeleaf
# ===============================
#spring.thymeleaf.check-template-location=true
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
#spring.thymeleaf.cache=false

#kebab-case '-' separated

management:
  endpoint:
    health:
      show-details: always

# management:
#   endpoints:
# #    beans:
# #      enabled: true
#     web:
#       exposure:
#         include: "*"
#   metrics:
# #    web:
# #      server:
# #        auto-time-requests: true
#     tags.host: hornsup
#     tags.environment: prod
#     tags.application: raspi-finance-convert
#     export:
#       influx:
#         enabled: false
#         auto-create-db: false
#         db: metrics
#         compressed: false
#         step: 1m
#         uri: http://hornsup::8086
#  health:
#    show-details: always
