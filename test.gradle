sourceSets {
  test {
    groovy {
      srcDirs = ['src/test/groovy']
    }
  }
  integrationTest {
    groovy {
      srcDirs = ['src/test-integration/groovy']
    }
    resources.srcDir 'src/main/resources'
    compileClasspath += sourceSets.main.output + configurations.testCompile
    runtimeClasspath += output + compileClasspath + configurations.testRuntime
  }
  functionalTest {
    groovy {
      srcDirs = ['src/test/functional/groovy']
    }
    resources.srcDir 'src/main/resources'
    compileClasspath += sourceSets.main.output + configurations.testCompile
    runtimeClasspath += output + compileClasspath + configurations.testRuntime
  }
}

dependencies {
  testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
  testCompile "org.spockframework:spock-core:${spockVersion}"
  testCompile "org.spockframework:spock-spring:${spockVersion}"
//  testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
  testCompile "com.h2database:h2:${h2databaseVersion}"
  testCompile "org.skyscreamer:jsonassert"

 // testRuntime "net.bytebuddy:byte-buddy:${bytebuddyVersion}"

  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  testCompile ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
  }
}

//provide dependency scopes
configurations {
  testIntegrationCompile.extendsFrom testCompile
  testIntegrationRuntime.extendsFrom testRuntime
  testFunctionalCompile.extendsFrom testCompile
  testFunctionalCompile.extendsFrom testRuntime
}

//integration test
task integrationTest(type: Test) {
  testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

//functional test
task functionalTest(type: Test) {
  testClassesDirs = project.sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

tasks.withType(Test) {
  systemProperties = System.properties
}

integrationTest.reports.html.destination = file("$buildDir/reports/test/integration")
functionalTest.reports.html.destination = file("$buildDir/reports/test/functional")
